[package]
name = "micro-bpf-server"
version = "0.1.0"
authors = ["Szymon Kubica <szymo.kubica@gmail.com"]
edition = "2018"
resolver = "2"

[lib]
crate-type = ["staticlib"]

[profile.release]
# Setting the panic mode has little effect on the built code (as Rust on RIOT
# supports no unwinding), but setting it allows builds on native without using
# the nightly-only lang_items feature.
panic = "abort"
# This is a typical set of options that helps Rust binaries stay small
lto = true
codegen-units = 1
opt-level = 3

[dependencies]
riot-wrappers = { version = "0.9.0", features = [ "set_panic_handler", "panic_handler_format", "with_coap_message", "with_coap_handler", "with_embedded_nal", "with_msg_v2", ] }
riot-sys = { version = "0.7.10" }
coap-message-demos = { git = "https://gitlab.com/chrysn/coap-message-demos/", default-features = false }
coap-message = "0.3.2"
coap-handler-implementations = "0.4"
coap-numbers = { version = "*", default-features = false }
coap-handler = "0.2.0"
riot-coap-handler-demos = { git = "https://gitlab.com/etonomy/riot-module-examples/", features = [ "vfs" ] }
riot-shell-commands = { git = "https://gitlab.com/etonomy/riot-module-examples", features = ["ztimer"] }
serde = { version = "1.0", default-features = false, features = ["alloc"] }
serde-json-core = "0.5.1"
embedded-hal = "0.2.2"
embedded-nal = "0.6.0"
num = { version = "0.4.2", default-features = false}
num-derive = { version = "0.4.2", default-features = false }
num-traits = { version = "0.2.18", default-features = false }

log = "0.4.20"
goblin = {version = "0.8.0", default_features = false , features = ["elf32", "elf64", "endian_fd"]}

rbpf = { path = "../vm", default-features = false }
micro-bpf-common = { path = "../tools/common" }
micro-bpf-elf-utils = { path = "../tools/elf-utils" }
macros = { path = "../tools/macros" }


# While currently this exmple does not use any RIOT modules implemented in
# Rust, that may change; it is best practice for any RIOT application that has
# its own top-level Rust crate to include rust_riotmodules from inside
# RIOTBASE.
rust_riotmodules = { path = "../RIOT/sys/rust_riotmodules/" }
